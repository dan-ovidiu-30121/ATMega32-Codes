void Init_adc();
int readADC (char ch);
void init_timer();
void init_display();
void display(char p, char c);
int digit = 0, adc_l = 0, adc_h = 0, adc = 0, T = 0;
float Vin, tmp;


void main() {
   init_display();
   init_timer();
   Init_adc();
}

void init_display(){
 DDRA = 0b00001111; //seteaza pinii de ie?ire
 DDRC = 0b11111111;
}

void Init_adc() {
 ADMUX = 0b01000000; //Referinta - AVCC  // multiplexorul (alegem tensiunea pe care o dorim)
 ADCSRA= 0b10000111; // primul bit: activare ADC; ultimii 3 biti: prescaler = 128;
 ADCSRA |= (1<<3); //Activare întrerupere ADIE(pt. ADC)
 SREG |= (1<<7); //Global Interrupt Enable
}

int readADC (char ch){  // pin ul de pe care vrem sa citim
 ADMUX &= 0b11100000; //Reseteaza canalul de conversie
 ADMUX |= ch; //Seteaza canalul conversiei
 ADCSRA |= (1<<6); //Începe conversia
 while(ADCSRA & (1<<6)); //Asteapta finalizarea conversiei // cand bit ul s-a resetat, salvam valorile dorite
 adc_l = ADCL;     // ADCL si ADCH 2 registrii pe 8 biti
 adc_h = ADCH;
return ((adc_h << 8) | adc_l);
}

void readADC_interrupt(char ch){  // porneste conversia si cand se termina conversie se ruleaza ADC_Completed
 ADMUX &= 0b11100000; //Reseteaza canalul de conversie
 ADMUX |= ch; //Seteaza canalul conversiei
 ADCSRA |= (1<<6); //Începe conversia
}

void init_timer(){
 SREG = 1<<7; // Global Interrupt Enable
 TCCR0 = 0b00001011; //CTC-3,6; Prescaler, ultimii 3 biti, ne uitam in DataSheet => prescaler 64; al 4-lea(1) si al 6-lea bit(0) => configuratia CTC (TOP = OCR0, adica alegem un prag; micsoram perioada)
 TCNT0 = 0;
 OCR0 = 125;
 TIMSK |= 0b00000010; //set interrupt OCM; al doilea bit
}


void Timer1_OC_ISR() iv IVT_ADDR_TIMER0_COMP ics ICS_AUTO { //ISR
  readAdc_interrupt(7);
  digit++;
  switch(digit){
      case 1: display(1,T%10); break;
      case 2: display(2,(T/10)%10); break;
      case 3: display(3,(T/100)%10); break;
      case 4: display(4,(T/1000)%10); digit=0; break;
 }
}
void ADC_Conmpleted() iv IVT_ADDR_ADC ics ICS_AUTO {
   adc_l = ADCL;
   adc_h = ADCH;
   adc = ((adc_h << 8) | adc_l);
   Vin = ((float)adc*5)/1024;
   tmp = Vin*1000/10;
   T = (int)tmp;
}

void display(char p, char c)    // p = port=ul, c = cifra pe care dorim sa o afisam
{
   PORTA &= 0b11110000;     // resetam port-urile
   PORTC &= 0b00000000;
   switch (c){
     case 0:
       PORTC |= 0b00111111; break;
     case 1:
       PORTC |= 0b00000110; break;
     case 2:
       PORTC |= 0b01011011; break;
     case 3:
       PORTC |= 0b01001111; break;
     case 4:
       PORTC |= 0b01100110; break;
     case 5:
       PORTC |= 0b01101101; break;
     case 6:
       PORTC |= 0b01111101; break;
     case 7:
       PORTC |= 0b00000111; break;
     case 8:
       PORTC |= 0b01111111; break;
     case 9:
       PORTC |= 0b01100111; break;
   }
   switch(p)
   {
     case 4:
      PORTA |= 0b00001000; break;
     case 3:
      PORTA |= 0b00000100; break;
     case 2:
      PORTA |= 0b000000010; break;
     case 1:
      PORTA |= 0b00000001; break;
   }
}